{"version":3,"sources":["custom.scss","base/_scaffolding.scss","base/_font-face.scss","base/_fonts.scss","components/_typography.scss","global/mixins/_include-media.scss","layout/_header.scss","layout/_nav.scss","layout/_footer.scss"],"names":[],"mappings":"AAAA,2CAIG;ACJH,OACC,gBAAe,EACf;;ACFD,aACC,sBAAqB,CACrB,+JAEoD,CACpD,iBAAgB,CAChB,mBAAkB,EAAA;;AAGnB,aACC,sBAAqB,CACrB,+JAEoD,CACpD,oBAAmB,CACnB,mBAAkB,EAAA;;AAGnB,aACC,sBAAqB,CACrB,+JAEoD,CACpD,iBAAgB,CAChB,mBAAkB,EAAA;;AAGnB,aACC,2BAA0B,CAC1B,4JAEmD,CACnD,oBAAmB,CACnB,mBAAkB,EAAA;;AAGnB,aACC,8BAA6B,CAC7B,oLAE2D,CAC3D,iBAAgB,CAChB,mBAAkB,EAAA;;AAGnB,aACC,8BAA6B,CAC7B,sMAEiE,CACjE,iBAAgB,CAChB,mBAAkB,EAAA;;AAGnB,aACC,8BAA6B,CAC7B,uLAE4D,CAC5D,iBAAgB,CAChB,mBAAkB,EAAA;;AAGnB,aACC,8BAA6B,CAC7B,kKAEqD,CACrD,oBAAmB,CACnB,mBAAkB,EAAA;;AAGnB,aACC,8BAA6B,CAC7B,iLAE0D,CAC1D,kBAAiB,CACjB,mBAAkB,EAAA;;AC9EnB,OAAO,8BAA6B,EAAK;;AAEzC,8CAC0B,sBAAqB,EAAK;;AAEpD,UAAU,2BAA0B,EAAK;;AAEzC,kEAGa,sBAAqB,EAAK;;AAIvC,mUAMmB,8BAA6B,EAAK;;AAKrD,wCAEc,8BAA6B,EAAK;;AAIhD,8CAGoB,8BAA6B,EAAK;;AClCtD,uDAEC,oBAAmB,CACnB,0BAAyB,EACzB;;AAED,UACC,kBAAiB,CACjB,iBAAgB,EAChB;;AAED,UAAU,kBAAiB,EAAK;;AAChC,UAAU,gBAAe,EAAK;;AAE9B,8CAEC,oBAAmB,EACnB;;AC8hBG,6BC/iBJ,yBAGG,iBAAgB,EAEjB,EAAA;;AD0iBE,6BE9iBH,+CAGG,gBAAe,CACf,oBAAmB,CACnB,sBAAqB,EACrB;EANH,mCAWG,sBAAqB,CACrB,0BAAyB,EAYzB;EAxBH,8GAiBK,gBAAe,EACf;EAlBL,2DAqBK,kBAAiB,EACjB,EAAA;;AFwhBF,6BEhhBH,mCAGG,sBAAqB,CACrB,sBAAyB,CAAzB,mBAAyB,CAAzB,0BAAyB,CACzB,0BAAyB,EAYzB;EAjBH,8GAUK,gBAAe,EACf;EAXL,2DAcK,kBAAiB,EACjB,EAAA;;AC9CN,gBACC,gBAAe,CACf,sBAAqB,CACrB,0BAAyB,EAwBzB;;AA3BD,yDAQI,eAAc,EACd;;AATJ,qCAcmB,mBAAkB,EAAK;;AAd1C,+BAiBG,oFAAmF,CACnF,2BAA0B,CAC1B,YAAW,CACX,eAAc,CACd,aAAY,CACZ,sBAAqB,CACrB,8BAA6B,CAC7B,YAAW,EACX;;AAIH,qBACC,0BAAyB,EAoBzB;;AArBD,0BAIE,yBAAuB,CAAvB,sBAAuB,CAAvB,wBAAuB,CACvB,sBAAqB,EAerB;;AApBF,+BAQG,mBAAkB,CAClB,oBAAmB,EAUnB;;AAnBH,mCAYI,sBAAqB,CACrB,eAAc,EACd;;AAdJ,sDAiBI,cAAa,EACb","file":"../custom.css","sourcesContent":["/**\n * AEPO styles.\n *\n * @package aepo-lsx-child\n */\n\n@import 'global/mixins/include-media';\n\n@import 'base/scaffolding';\n@import 'base/font-face';\n@import 'base/fonts';\n\n@import 'components/typography';\n\n@import 'layout/header';\n@import 'layout/nav';\n@import 'layout/footer';\n","body {\n\tfont-size: 14px;\n}\n","@font-face {\n\tfont-family: 'Avenir';\n\tsrc: url('../fonts/Avenir-Light.woff2') format('woff2'),\n\t\turl('../fonts/Avenir-Light.woff') format('woff'),\n\t\turl('../fonts/Avenir-Light.ttf') format('truetype');\n\tfont-weight: 300;\n\tfont-style: normal;\n}\n\n@font-face {\n\tfont-family: 'Avenir';\n\tsrc: url('../fonts/Avenir-Roman.woff2') format('woff2'),\n\t\turl('../fonts/Avenir-Roman.woff') format('woff'),\n\t\turl('../fonts/Avenir-Roman.ttf') format('truetype');\n\tfont-weight: normal;\n\tfont-style: normal;\n}\n\n@font-face {\n\tfont-family: 'Avenir';\n\tsrc: url('../fonts/Avenir-Black.woff2') format('woff2'),\n\t\turl('../fonts/Avenir-Black.woff') format('woff'),\n\t\turl('../fonts/Avenir-Black.ttf') format('truetype');\n\tfont-weight: 900;\n\tfont-style: normal;\n}\n\n@font-face {\n\tfont-family: 'Avenir Book';\n\tsrc: url('../fonts/Avenir-Book.woff2') format('woff2'),\n\t\turl('../fonts/Avenir-Book.woff') format('woff'),\n\t\turl('../fonts/Avenir-Book.ttf') format('truetype');\n\tfont-weight: normal;\n\tfont-style: normal;\n}\n\n@font-face {\n\tfont-family: 'Helvetica Neue';\n\tsrc: url('../fonts/HelveticaNeue-Light.woff2') format('woff2'),\n\t\turl('../fonts/HelveticaNeue-Light.woff') format('woff'),\n\t\turl('../fonts/HelveticaNeue-Light.ttf') format('truetype');\n\tfont-weight: 300;\n\tfont-style: normal;\n}\n\n@font-face {\n\tfont-family: 'Helvetica Neue';\n\tsrc: url('../fonts/HelveticaNeue-LightItalic.woff2') format('woff2'),\n\t\turl('../fonts/HelveticaNeue-LightItalic.woff') format('woff'),\n\t\turl('../fonts/HelveticaNeue-LightItalic.ttf') format('truetype');\n\tfont-weight: 300;\n\tfont-style: italic;\n}\n\n@font-face {\n\tfont-family: 'Helvetica Neue';\n\tsrc: url('../fonts/HelveticaNeue-Medium.woff2') format('woff2'),\n\t\turl('../fonts/HelveticaNeue-Medium.woff') format('woff'),\n\t\turl('../fonts/HelveticaNeue-Medium.ttf') format('truetype');\n\tfont-weight: 500;\n\tfont-style: normal;\n}\n\n@font-face {\n\tfont-family: 'Helvetica Neue';\n\tsrc: url('../fonts/HelveticaNeue.woff2') format('woff2'),\n\t\turl('../fonts/HelveticaNeue.woff') format('woff'),\n\t\turl('../fonts/HelveticaNeue.ttf') format('truetype');\n\tfont-weight: normal;\n\tfont-style: normal;\n}\n\n@font-face {\n\tfont-family: 'Helvetica Neue';\n\tsrc: url('../fonts/HelveticaNeue-Bold.woff2') format('woff2'),\n\t\turl('../fonts/HelveticaNeue-Bold.woff') format('woff'),\n\t\turl('../fonts/HelveticaNeue-Bold.ttf') format('truetype');\n\tfont-weight: bold;\n\tfont-style: normal;\n}\n","body { font-family: 'Helvetica Neue'; }\n\nh1, h2, h4, h5, h6,\n.h1, .h2, .h4, .h5, .h6 { font-family: 'Avenir'; }\n\nh3, .h3 { font-family: 'Avenir Book'; }\n\n.content-area,\n.widget-area {\n\tblockquote {\n\t\t&:before { font-family: 'Avenir'; }\n\t}\n}\n\n.blog,\n.archive,\n.search.search-results {\n\tarticle.post,\n\tarticle.page {\n\t\t.entry-title {\n\t\t\t.label-sticky { font-family: 'Helvetica Neue'; }\n\t\t}\n\t}\n}\n\n#respond {\n\t.comment-reply-title {\n\t\t& > small { font-family: 'Helvetica Neue'; }\n\t}\n}\n\n#comments {\n\t.media-list {\n\t\t.media {\n\t\t\t.media-heading { font-family: 'Helvetica Neue'; }\n\t\t}\n\t}\n}\n","h1, h2, h3, h4, h5, h6,\n.h1, .h2, .h3, .h4, .h5, .h6 {\n\tletter-spacing: 5px;\n\ttext-transform: uppercase;\n}\n\nh1, .h1 {\n\tfont-size: 4.4rem;\n\tfont-weight: 900;\n}\n\nh2, .h2 { font-size: 2.4rem; }\nh3, .h3 { font-size: 2rem; }\n\nh2, h3, h4, h5, h6,\n.h2, .h3, .h4, .h5, .h6 {\n\tfont-weight: normal;\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 768px,\n  'tablet': 992px,\n  'desktop': 1200px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","#masthead {\n\t& > .container {\n\t\t@include media('>=desktop') {\n\t\t\tmin-height: 72px;\n\t\t}\n\t}\n}\n","@include media('<desktop') {\n\t#masthead {\n\t\t.wrapper-toggle {\n\t\t\t.mobile-menu-title {\n\t\t\t\tfont-size: 12px;\n\t\t\t\tfont-weight: normal;\n\t\t\t\tletter-spacing: 1.5px;\n\t\t\t}\n\t\t}\n\n\t\t.primary-navbar {\n\t\t\t& > .nav {\n\t\t\t\tletter-spacing: 1.5px;\n\t\t\t\ttext-transform: uppercase;\n\n\t\t\t\t& > .menu-item {\n\t\t\t\t\t& > a,\n\t\t\t\t\t&.active > a {\n\t\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&.active > a {\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n@include media('>=desktop') {\n\t#masthead {\n\t\t.primary-navbar {\n\t\t\t& > .nav {\n\t\t\t\tletter-spacing: 1.5px;\n\t\t\t\tjustify-content: flex-end;\n\t\t\t\ttext-transform: uppercase;\n\n\t\t\t\t& > .menu-item {\n\t\t\t\t\t& > a,\n\t\t\t\t\t&.active > a {\n\t\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&.active > a {\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",".content-info {\n\tfont-size: 10px;\n\tletter-spacing: 1.5px;\n\tpadding: 7rem 0 10.5rem 0;\n\n\t& > .container {\n\t\t& > .row {\n\t\t\t& > div[class*='col-'] {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t}\n\t}\n\n\t.credit {\n\t\t&.credit-float { text-align: center; }\n\n\t\t&:before {\n\t\t\tbackground: transparent url('../images/logo-footer@2x.png') no-repeat center center;\n\t\t\tbackground-size: 28px 26px;\n\t\t\tcontent: '';\n\t\t\tdisplay: block;\n\t\t\theight: 26px;\n\t\t\tmargin-bottom: 3.5rem;\n\t\t\tmargin-left: calc(50% - 14px);\n\t\t\twidth: 28px;\n\t\t}\n\t}\n}\n\n.footer-navigation {\n\ttext-transform: uppercase;\n\n\t& > ul {\n\t\tjustify-content: center;\n\t\tpadding: 3.5rem 0 0 0;\n\n\t\t& > li {\n\t\t\tpadding-left: 15px;\n\t\t\tpadding-right: 15px;\n\n\t\t\t& > a {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tpadding: 4px 0;\n\t\t\t}\n\n\t\t\t&:not(:last-child):after {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}